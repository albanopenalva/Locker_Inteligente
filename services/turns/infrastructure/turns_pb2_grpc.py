# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import infrastructure.turns_pb2 as turns__pb2


class TURNSStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFreeLockers = channel.unary_unary(
                '/turns.TURNS/GetFreeLockers',
                request_serializer=turns__pb2.empty.SerializeToString,
                response_deserializer=turns__pb2.freeLockers.FromString,
                )
        self.UserGotTurn = channel.unary_unary(
                '/turns.TURNS/UserGotTurn',
                request_serializer=turns__pb2.id.SerializeToString,
                response_deserializer=turns__pb2.turn.FromString,
                )
        self.LockerGotTurn = channel.unary_unary(
                '/turns.TURNS/LockerGotTurn',
                request_serializer=turns__pb2.locker.SerializeToString,
                response_deserializer=turns__pb2.turn.FromString,
                )
        self.StartTurn = channel.unary_unary(
                '/turns.TURNS/StartTurn',
                request_serializer=turns__pb2.turn.SerializeToString,
                response_deserializer=turns__pb2.turn.FromString,
                )
        self.EndTurn = channel.unary_unary(
                '/turns.TURNS/EndTurn',
                request_serializer=turns__pb2.turn.SerializeToString,
                response_deserializer=turns__pb2.success.FromString,
                )
        self.GetTurns = channel.unary_stream(
                '/turns.TURNS/GetTurns',
                request_serializer=turns__pb2.dates.SerializeToString,
                response_deserializer=turns__pb2.turn.FromString,
                )


class TURNSServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetFreeLockers(self, request, context):
        """Looks for turns availables
        Returns: list of free lockers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserGotTurn(self, request, context):
        """Check if user have a turn for a locker
        Input: user's id
        Return: turn
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LockerGotTurn(self, request, context):
        """Check if a locker have an active turn
        Input: locker number
        Return: turn
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartTurn(self, request, context):
        """Starts a locker's turn for an user
        Input: turn
        Return: success
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndTurn(self, request, context):
        """Ends a locker's turn
        Input: turn
        Return: success
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTurns(self, request, context):
        """Send info for turns between dates
        Input: dates
        Return: stream turn
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TURNSServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFreeLockers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFreeLockers,
                    request_deserializer=turns__pb2.empty.FromString,
                    response_serializer=turns__pb2.freeLockers.SerializeToString,
            ),
            'UserGotTurn': grpc.unary_unary_rpc_method_handler(
                    servicer.UserGotTurn,
                    request_deserializer=turns__pb2.id.FromString,
                    response_serializer=turns__pb2.turn.SerializeToString,
            ),
            'LockerGotTurn': grpc.unary_unary_rpc_method_handler(
                    servicer.LockerGotTurn,
                    request_deserializer=turns__pb2.locker.FromString,
                    response_serializer=turns__pb2.turn.SerializeToString,
            ),
            'StartTurn': grpc.unary_unary_rpc_method_handler(
                    servicer.StartTurn,
                    request_deserializer=turns__pb2.turn.FromString,
                    response_serializer=turns__pb2.turn.SerializeToString,
            ),
            'EndTurn': grpc.unary_unary_rpc_method_handler(
                    servicer.EndTurn,
                    request_deserializer=turns__pb2.turn.FromString,
                    response_serializer=turns__pb2.success.SerializeToString,
            ),
            'GetTurns': grpc.unary_stream_rpc_method_handler(
                    servicer.GetTurns,
                    request_deserializer=turns__pb2.dates.FromString,
                    response_serializer=turns__pb2.turn.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'turns.TURNS', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TURNS(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetFreeLockers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turns.TURNS/GetFreeLockers',
            turns__pb2.empty.SerializeToString,
            turns__pb2.freeLockers.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserGotTurn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turns.TURNS/UserGotTurn',
            turns__pb2.id.SerializeToString,
            turns__pb2.turn.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LockerGotTurn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turns.TURNS/LockerGotTurn',
            turns__pb2.locker.SerializeToString,
            turns__pb2.turn.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartTurn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turns.TURNS/StartTurn',
            turns__pb2.turn.SerializeToString,
            turns__pb2.turn.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EndTurn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turns.TURNS/EndTurn',
            turns__pb2.turn.SerializeToString,
            turns__pb2.success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTurns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/turns.TURNS/GetTurns',
            turns__pb2.dates.SerializeToString,
            turns__pb2.turn.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
