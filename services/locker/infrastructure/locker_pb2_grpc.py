# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import infrastructure.locker_pb2 as locker__pb2


class LOCKERStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OpenDoor = channel.unary_unary(
                '/locker.LOCKER/OpenDoor',
                request_serializer=locker__pb2.door.SerializeToString,
                response_deserializer=locker__pb2.success.FromString,
                )
        self.IsDoorClosed = channel.unary_unary(
                '/locker.LOCKER/IsDoorClosed',
                request_serializer=locker__pb2.door.SerializeToString,
                response_deserializer=locker__pb2.door_closed.FromString,
                )
        self.SetOutlet = channel.unary_unary(
                '/locker.LOCKER/SetOutlet',
                request_serializer=locker__pb2.outlet.SerializeToString,
                response_deserializer=locker__pb2.success.FromString,
                )
        self.GetPower = channel.unary_stream(
                '/locker.LOCKER/GetPower',
                request_serializer=locker__pb2.dates.SerializeToString,
                response_deserializer=locker__pb2.consumption.FromString,
                )
        self.GetID = channel.unary_unary(
                '/locker.LOCKER/GetID',
                request_serializer=locker__pb2.empty.SerializeToString,
                response_deserializer=locker__pb2.card.FromString,
                )
        self.PlaySound = channel.unary_unary(
                '/locker.LOCKER/PlaySound',
                request_serializer=locker__pb2.sound.SerializeToString,
                response_deserializer=locker__pb2.success.FromString,
                )


class LOCKERServicer(object):
    """Missing associated documentation comment in .proto file."""

    def OpenDoor(self, request, context):
        """Opens locker door
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsDoorClosed(self, request, context):
        """Checks if all locker doors are closed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetOutlet(self, request, context):
        """Activate/Deactivate locker's outlets
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPower(self, request, context):
        """Send locker power consumption by day 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetID(self, request, context):
        """Measure locker power consumption
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlaySound(self, request, context):
        """Play a sound for locker interface
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LOCKERServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OpenDoor': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenDoor,
                    request_deserializer=locker__pb2.door.FromString,
                    response_serializer=locker__pb2.success.SerializeToString,
            ),
            'IsDoorClosed': grpc.unary_unary_rpc_method_handler(
                    servicer.IsDoorClosed,
                    request_deserializer=locker__pb2.door.FromString,
                    response_serializer=locker__pb2.door_closed.SerializeToString,
            ),
            'SetOutlet': grpc.unary_unary_rpc_method_handler(
                    servicer.SetOutlet,
                    request_deserializer=locker__pb2.outlet.FromString,
                    response_serializer=locker__pb2.success.SerializeToString,
            ),
            'GetPower': grpc.unary_stream_rpc_method_handler(
                    servicer.GetPower,
                    request_deserializer=locker__pb2.dates.FromString,
                    response_serializer=locker__pb2.consumption.SerializeToString,
            ),
            'GetID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetID,
                    request_deserializer=locker__pb2.empty.FromString,
                    response_serializer=locker__pb2.card.SerializeToString,
            ),
            'PlaySound': grpc.unary_unary_rpc_method_handler(
                    servicer.PlaySound,
                    request_deserializer=locker__pb2.sound.FromString,
                    response_serializer=locker__pb2.success.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'locker.LOCKER', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LOCKER(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def OpenDoor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/locker.LOCKER/OpenDoor',
            locker__pb2.door.SerializeToString,
            locker__pb2.success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsDoorClosed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/locker.LOCKER/IsDoorClosed',
            locker__pb2.door.SerializeToString,
            locker__pb2.door_closed.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetOutlet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/locker.LOCKER/SetOutlet',
            locker__pb2.outlet.SerializeToString,
            locker__pb2.success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPower(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/locker.LOCKER/GetPower',
            locker__pb2.dates.SerializeToString,
            locker__pb2.consumption.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/locker.LOCKER/GetID',
            locker__pb2.empty.SerializeToString,
            locker__pb2.card.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PlaySound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/locker.LOCKER/PlaySound',
            locker__pb2.sound.SerializeToString,
            locker__pb2.success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
