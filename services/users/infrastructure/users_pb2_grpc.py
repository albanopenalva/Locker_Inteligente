# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import infrastructure.users_pb2 as users__pb2

class USERSStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUser = channel.unary_unary(
                '/users.USERS/GetUser',
                request_serializer=users__pb2.id.SerializeToString,
                response_deserializer=users__pb2.userData.FromString,
                )
        self.RegCard = channel.unary_unary(
                '/users.USERS/RegCard',
                request_serializer=users__pb2.id.SerializeToString,
                response_deserializer=users__pb2.success.FromString,
                )
        self.RegUser = channel.unary_unary(
                '/users.USERS/RegUser',
                request_serializer=users__pb2.userData.SerializeToString,
                response_deserializer=users__pb2.success.FromString,
                )
        self.ChangeProfile = channel.unary_unary(
                '/users.USERS/ChangeProfile',
                request_serializer=users__pb2.userData.SerializeToString,
                response_deserializer=users__pb2.success.FromString,
                )
        self.DeleteUser = channel.unary_unary(
                '/users.USERS/DeleteUser',
                request_serializer=users__pb2.userData.SerializeToString,
                response_deserializer=users__pb2.success.FromString,
                )
        self.DeleteCard = channel.unary_unary(
                '/users.USERS/DeleteCard',
                request_serializer=users__pb2.userData.SerializeToString,
                response_deserializer=users__pb2.success.FromString,
                )


class USERSServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetUser(self, request, context):
        """Search for an user by his RFID card
        Returns: 
        - status: true: card id exists in DB, false: it doesn't
        - name: Null: user not registered, else: name
        - lastname: Null: user not registered, else: lastname
        - profile: Null: or "user" normal user, "admin": administrator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegCard(self, request, context):
        """Register RFID card in DB
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegUser(self, request, context):
        """Register user in DB
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeProfile(self, request, context):
        """Change user profile
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Delete user from DB, but not RFID card
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCard(self, request, context):
        """Delete card from DB and the asociated user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_USERSServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=users__pb2.id.FromString,
                    response_serializer=users__pb2.userData.SerializeToString,
            ),
            'RegCard': grpc.unary_unary_rpc_method_handler(
                    servicer.RegCard,
                    request_deserializer=users__pb2.id.FromString,
                    response_serializer=users__pb2.success.SerializeToString,
            ),
            'RegUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegUser,
                    request_deserializer=users__pb2.userData.FromString,
                    response_serializer=users__pb2.success.SerializeToString,
            ),
            'ChangeProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeProfile,
                    request_deserializer=users__pb2.userData.FromString,
                    response_serializer=users__pb2.success.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=users__pb2.userData.FromString,
                    response_serializer=users__pb2.success.SerializeToString,
            ),
            'DeleteCard': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCard,
                    request_deserializer=users__pb2.userData.FromString,
                    response_serializer=users__pb2.success.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'users.USERS', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class USERS(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/users.USERS/GetUser',
            users__pb2.id.SerializeToString,
            users__pb2.userData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegCard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/users.USERS/RegCard',
            users__pb2.id.SerializeToString,
            users__pb2.success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/users.USERS/RegUser',
            users__pb2.userData.SerializeToString,
            users__pb2.success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangeProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/users.USERS/ChangeProfile',
            users__pb2.userData.SerializeToString,
            users__pb2.success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/users.USERS/DeleteUser',
            users__pb2.userData.SerializeToString,
            users__pb2.success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/users.USERS/DeleteCard',
            users__pb2.userData.SerializeToString,
            users__pb2.success.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
